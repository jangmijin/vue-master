
 뷰 인스턴스는 뷰로 화면을 개발하기 위해 필수적으로 생성해야하는 
 기본 단위
 필수조건!!!!!

 뷰인스턴스 생성
 new Vue({

 });

 뷰 인스턴스 생성자
 new Vue()로 인스턴스를 생성할 때 Vue를 생성자라고 합니다.
 
 Vue 생성자는 뷰 라이브러리를 로딩하고 나면 접근 할 수 있다.

 생성자란?
 생성자는 객체를 새로 생성할 때 자주 사용하는 옵션과 기능들을 미리 특정 객체에
 저장해 놓고, 새로 객체를 생성할 때 기존에 포함된 기능과 더불어 기존 기능을 쉽게 확장하여
 사용하는 기법입니다.
 일반적으로 객체지향프로그래밍에서 사용하는 객체 정의 방식으로 미리 정의된 속성과 메서드를 재활용하기 위해 사용.

 인스턴스의 유효범위
 인스턴스의 유효범위는 el속성과 밀접한 관계가 있습니다.

 beforeCreate
 인스턴스가 생성되고 가장 처음으로 실행되는 라이프 사이클 단계
 이 단계에서는 data속성과 methods속성이 아직 인스턴스에 정의되어 있지 않고
 돔과 같은 화면 요소에도 접근 못함.

 created
 beforecreate 라이프 사이클 단계 다음에 실행되는 단계.
 data속성과 methods속성이 정의되었기 떄문에 this.data또는 this.fetchData()와 같은
 로직들을 이용하여 data속성과 methods속성에 정의된 값에 접근하여 로직을 실행.
 다만 아직 인스턴스가 화면요소에 부착되기 전이기 때문에 template속성에 정의된 돔 요소를 접근할 수 없다.

 beforeMount
 created단계 이후 template속성에 지정한 마크업 속성을 render()함수로 변환한 후 el속성에
 지정한 화면 요소(돔)에 인스턴스를 부착하기 전에 호출되는 단계
render()함수가 호출되기 직전의 로직을 추가하기 좋다.
render()는 자바스크립트로 화면의 돔을 그리는 함수

Mounted
el속성에서 지정한 화면 요소에 인스턴스가 부착되고 나면 호출되는 단계
template속성에 정의한 화면 요소에 접근할 수 있어 화면 요소를 제어하는 로직을 수행하기 좋은 단계

beforeUpdate
el속성에서 지정한 화면 요소에 인스턴스가 부착되고 나면 인스턴스에 정의한 속성들이 화면에 치환

Updated
데이터가 변경되고 나서 가상 돔으로 다시 화면을 그리고 나면 실행되는 단계
데이터 변경으로 인한 화면 요소 변경까지 완료된 시점이므로 데이터 변경 후 화면 요소 제어와 관련된 로직을 추가하기 좋은 단계

beforeDestroy
뷰 인스턴스가 파괴되기 직전에 호출되는 단계. 이 단계에서는 아직 인스턴스에 접근할 수 있습니다.
따라서 뷰 인스턴스의 데이터를 삭제하기 좋은 단계

destroyed
뷰 인스턴스가 파괴되고 나서 호출되는 단계. 뷰 인스턴스에 정의한 속성이 제거되고
하위에 선언한 인스턴스들 또한 모두 파괴.
